package test;

import model.PlayList;
import model.Song;
import org.junit.Test;

import static org.junit.Assert.assertEquals;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.List;

public class PlayListTest {

    @Test
    public void testPlayListCreation() {
        // Test regular playlist creation
        PlayList playList = new PlayList("Lisa");
        assertEquals("Lisa", playList.getListName());
        assertNotNull(playList.getSongs());
        assertEquals(0, playList.getSongs().size());
        assertFalse(playList.isAutoGenerated());

        // Test auto-generated playlist creation
        PlayList autoGeneratedPlayList = new PlayList("AutoMix", true);
        assertEquals("AutoMix", autoGeneratedPlayList.getListName());
        assertTrue(autoGeneratedPlayList.isAutoGenerated());
    }

    @Test
    public void testAddSong() {
        PlayList playList = new PlayList("Favorites");

        // Add first song
        Song song1 = new Song("Remember Me", "Adele", "Pop");
        assertTrue(playList.addSong(song1));
        assertEquals(1, playList.getSongs().size());

        // Attempt to add a duplicate song (should return false)
        assertFalse(playList.addSong(new Song("Remember Me", "Adele", "Pop")));
        assertEquals(1, playList.getSongs().size());

        // Add a second unique song
        Song song2 = new Song("Rolling in the Deep", "Adele", "Pop");
        assertTrue(playList.addSong(song2));
        assertEquals(2, playList.getSongs().size());
    }

    @Test
    public void testRemoveSong() {
        PlayList playList = new PlayList("Hits");

        // Add songs
        playList.addSong(new Song("Hello", "Adele", "Pop"));
        playList.addSong(new Song("Someone Like You", "Adele", "Pop"));

        // Remove an existing song
        assertTrue(playList.removeSong("Hello", "Adele"));
        assertEquals(1, playList.getSongs().size());

        // Attempt to remove a non-existent song
        assertFalse(playList.removeSong("Nonexistent Song", "Unknown Artist"));
        assertEquals(1, playList.getSongs().size());
    }

    @Test
    public void testContainsSong() {
        PlayList playList = new PlayList("Chill Vibes");

        // Add a song
        playList.addSong(new Song("Skyfall", "Adele", "Soundtrack"));

        // Check if the playlist contains the song
        assertTrue(playList.containsSong("Skyfall", "Adele"));

        // Check for a song that does not exist
        assertFalse(playList.containsSong("Rolling in the Deep", "Adele"));
    }

    @Test
    public void testEmptyPlayListBehavior() {
        PlayList playList = new PlayList("Empty Playlist");

        // Removing a song from an empty playlist should return false
        assertFalse(playList.removeSong("Nonexistent", "Unknown Artist"));

        // Checking for a song in an empty playlist should return false
        assertFalse(playList.containsSong("Nonexistent", "Unknown Artist"));
    }

    
}
